package main

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"strings"
)
 
var results []string

func main() {
	port := os.Getenv("PORT")
 
	if port == "" {
		port = "8090"
	}
 
	http.HandleFunc("/", PostHandler)
 
	log.Println("Listening on port", port)
	log.Fatal(http.ListenAndServe(fmt.Sprintf(":%s", port), nil))
}
 
type AutoGenerated struct {
	Version int    `json:"version"`
	Event   string `json:"event"`
	Build   struct {
		Number         int    `json:"number"`
		Branch         string `json:"branch"`
		Commit         string `json:"commit"`
		CommitterName  string `json:"committerName"`
		Status         string `json:"status"`
		Result         string `json:"result"`
		StorybookURL   string `json:"storybookUrl"`
		WebURL         string `json:"webUrl"`
		ChangeCount    int    `json:"changeCount"`
		ComponentCount int    `json:"componentCount"`
		SpecCount      int    `json:"specCount"`
		Project        struct {
			Name             string `json:"name"`
			AccountName      string `json:"accountName"`
			AccountAvatarURL string `json:"accountAvatarUrl"`
			WebURL           string `json:"webUrl"`
		} `json:"project"`
	} `json:"build"`
}

func PostHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method == "POST" {
		body, err := io.ReadAll(r.Body)
		log.Println(body)
		if err != nil {
			http.Error(w, "Error reading request body",
				http.StatusInternalServerError)
		}
		log.Println(string(body))
		results = append(results, string(body))
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusCreated)
		var msg AutoGenerated
		err = json.Unmarshal(body, &msg)
		if err != nil {
			http.Error(w, err.Error(), 500)
			return
		}

		if msg.Event != "build" {
			http.Error(w, "Not a build", 500)
			return
		}
		if msg.Build.Status != "PENDING" {
			http.Error(w, "Valid build", 500)
			return
		}

		jsonResp, err := json.Marshal(msg)
		if err != nil {
			log.Fatalf("Error happened in JSON marshal. Err: %s", err)
		}
		w.Write(jsonResp)
		message:= fmt.Sprintf("В сторибуке что-то изменилось, нужно ревью @oleg_kaliugin_oka @aleksandr_panov_alp! Ссылка: %s", msg.Build.WebURL)
		TelegramBot(message)
	} else {
		http.Error(w, "Invalid request method", http.StatusMethodNotAllowed)
	}
}

func TelegramBot(message string) {
	client := &http.Client{}
	queryString := fmt.Sprintf("message_thread_id=1127&chat_id=-1001951754791&text=%s&parse_mode=html", message)
	var data = strings.NewReader(queryString)
	req, err := http.NewRequest("POST", "https://api.telegram.org/bot6831685755:AAFWAplHUZfcnySZnv18mNC1qBaxeD8-V8s/sendMessage", data)
	if err != nil {
		log.Fatal(err)
	}
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
	resp, err := client.Do(req)
	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()
	bodyText, err := io.ReadAll(resp.Body)
	if err != nil {
		log.Fatal(err)
	}
	fmt.Printf("%s\n", bodyText)
}